//Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.
class Solution {
public:
    //subarray has to include consecutive index, thus dynamic programming can be used here
    //longest positive and longest negative integer to track at each stage the longest positive and negative sequence within array nums[0, i-1];
    //update the two records accordingly depending on if the current nums[i] is positive or negative
    //meanwhile update answer if longer sequence subarray found
    int getMaxLen(vector<int>& nums) {
        int lp = 0, ln = 0, r = 0, t = lp;;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {lp = 0; ln = 0;}
            if (nums[i] < 0) {
                if (lp > 0 && ln > 0) {t = lp; lp = ln+1; ln = t+1;}
                else if (lp == 0 && ln > 0) {lp = ln+1;ln = 1;}
                else if (lp > 0 && ln == 0) {ln = lp+1; lp = 0;}
                else if (lp == 0 && ln == 0) {ln = 1;}

            }
            if (nums[i] > 0) {
                lp+=1;
                if (ln > 0) ln+=1;
            }

            if (r < lp) r = lp;
        }
        return r;
    }
};
