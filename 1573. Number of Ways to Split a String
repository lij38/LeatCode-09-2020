//Given a binary string s (a string consisting only of '0's and '1's), we can split s into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).
//Return the number of ways s can be split such that the number of characters '1' is the same in s1, s2, and s3.
//Return result modulo 10^9 + 7.

class Solution {
public:
    int c = 1000000007;
    
    //Split all 1 into three equal pieces
    //Count # of 0s in between sections of 1s, ways to split would equal to product of two number
    int numWays(string s) {
        //scan 1s
        //split ones
        vector<int> b;
        long r = 1;
        for (int i = 0; i < s.size(); i++) if(s[i] == '1') b.push_back(i);
        if (b.size() == 0) return fib(s.size()-2);
        if (b.size()%3 != 0) {return 0;}
        else {
            int s = b.size()/3;
            for (int i = s-1; i < b.size()-1; i += s) {
                r*= (long)(b[i+1] - b[i])%c;                
            }
        }
        return (int)(r%c);
    }
    
    int fib(int s) {
        long l = 1;
        l = (long)l * (1 + s) * s / 2;
        return (int)(l%c);
    }
    
};
