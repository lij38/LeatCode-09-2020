//Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.
//Return the length of the shortest subarray to remove.

class Solution {
public:
    //Since subarray needs to be consecutive
    //Only front array in non decreasing order and end array in non decreasing order matter
    //for each length of front array, binary search first number >= end number of front array, combine both would result in non decreasing array
    //update longest sequence accordingly
    int findLengthOfShortestSubarray(vector<int>& arr) {
        if (arr.size() == 1) return 0;
        int b[4] = {0, -1, -1, (int)(arr.size()-1)};
        int p = arr[0];
        for (int i = 1; i < b[3]+1; i++)  if (arr[i] < p) {b[1] = i-1; break;} else { p = arr[i];}
        p = arr[b[3]];
        for (int i = b[3]-1; i >= 0; i--) if (arr[i] > p) {b[2] = i+1; break;} else { p = arr[i];}
        
        if (b[2] == -1 && b[1] == -1) {return 0;}
        
        int m = b[3]+1-b[2];
        int c = 0;
        for (int i = 0; i <= b[1]; i++) {
            c = i+1+1+b[3]-bs(arr, i, b[2], b[3]);
            if (c > m) m = c;
        }
        
        return b[3]+1-m;
    }
    
    
    //return first index equal or larger than arr[i]
    int bs(vector<int>& arr, int i, int j, int k) {
        int r = arr.size();
        while(j <= k) {
            int m = (j+k)/2;
            if (arr[m] < arr[i]) j = m+1;
            else {
                r = m;
                k = m-1;
            } 
        }
        return r;
    }
};
